import os
import requests
import logging
from typing import Optional
from dotenv import load_dotenv

load_dotenv()

logger = logging.getLogger(__name__)

class TelegramAlertManager:
    """Telegram alert manager for honeypot notifications"""
    
    def __init__(self):
        self.bot_token = os.getenv("TELEGRAM_BOT_TOKEN")
        self.chat_id = os.getenv("TELEGRAM_CHAT_ID")
        self.max_message_length = 4096
        
        if not self.bot_token or not self.chat_id:
            logger.warning("Telegram credentials not configured")
        else:
            logger.info("Telegram alerts configured")

    def is_configured(self) -> bool:
        """Check if Telegram is properly configured"""
        return bool(self.bot_token and self.chat_id)

    def _send_message(self, text: str) -> bool:
        """Send message to Telegram"""
        if not self.is_configured():
            logger.warning("Telegram not configured, skipping message")
            return False

        try:
            # Truncate message if too long
            if len(text) > self.max_message_length:
                text = text[:self.max_message_length - 3] + "..."

            url = f"https://api.telegram.org/bot{self.bot_token}/sendMessage"
            payload = {
                "chat_id": self.chat_id,
                "text": text,
                "parse_mode": "HTML"
            }

            response = requests.post(url, json=payload, timeout=10)
            response.raise_for_status()

            if response.json().get("ok"):
                logger.info("Telegram alert sent successfully")
                return True
            else:
                logger.error(f"Telegram API error: {response.json()}")
                return False

        except requests.exceptions.RequestException as e:
            logger.error(f"Failed to send Telegram alert: {e}")
            return False
        except Exception as e:
            logger.error(f"Unexpected error sending Telegram alert: {e}")
            return False

    async def send_alert(self, command: str, ip: str, threat_level: str, 
                       anomaly_score: float = None, additional_info: dict = None):
        """Send threat alert to Telegram"""
        
        # Create alert message
        alert_emoji = {
            "LOW": "🟢",
            "MEDIUM": "🟡", 
            "HIGH": "🟠",
            "CRITICAL": "🚨"
        }.get(threat_level, "⚠️")

        message = f"""🛡️ <b>Honeypot Alert</b> {alert_emoji}

<b>Threat Level:</b> {threat_level}
<b>Source IP:</b> <code>{ip}</code>
<b>Command:</b> <code>{command}</code>
"""

        if anomaly_score is not None:
            message += f"<b>Anomaly Score:</b> {anomaly_score:.3f}\n"

        if additional_info:
            message += f"<b>Additional Info:</b>\n"
            for key, value in additional_info.items():
                message += f"• {key}: {value}\n"

        message += f"\n<i>Detected by AIML Honeypot</i>"

        # Send alert
        success = self._send_message(message)
        
        if not success:
            logger.error(f"Failed to send alert for command: {command} from IP: {ip}")
        
        return success

    async def send_daily_summary(self, stats: dict):
        """Send daily honeypot summary"""
        
        message = f"""📊 <b>Daily Honeypot Summary</b>

📈 <b>Activity Stats:</b>
• Total Sessions: {stats.get('total_sessions', 0)}
• Total Commands: {stats.get('total_commands', 0)}
• Threats Detected: {stats.get('total_threats', 0)}

🚨 <b>Threat Breakdown:</b>
"""

        threat_counts = stats.get('threat_counts', {})
        for level, count in threat_counts.items():
            emoji = {
                "LOW": "🟢",
                "MEDIUM": "🟡",
                "HIGH": "🟠", 
                "CRITICAL": "🚨"
            }.get(level, "▪️")
            message += f"• {emoji} {level}: {count}\n"

        # Top attacking IPs
        top_ips = stats.get('top_attacking_ips', [])[:5]
        if top_ips:
            message += f"\n🎯 <b>Top Attacking IPs:</b>\n"
            for ip, count in top_ips:
                message += f"• <code>{ip}</code>: {count} attempts\n"

        message += f"\n<i>Generated by AIML Honeypot</i>"

        return self._send_message(message)

    async def send_system_alert(self, alert_type: str, message: str, details: dict = None):
        """Send system-level alert"""
        
        alert_fonts = {
            "ERROR": "❌",
            "WARNING": "⚠️",
            "INFO": "ℹ️",
            "SUCCESS": "✅"
        }
        icon = alert_fonts.get(alert_type, "📢")

        alert_message = f"""{icon} <b>System Alert - {alert_type}</b>

{message}
"""

        if details:
            alert_message += f"\n<b>Details:</b>\n"
            for key, value in details.items():
                alert_message += f"• {key}: {value}\n"

        alert_message += f"\n<i>AIML Honeypot System</i>"

        return self._send_message(alert_message)

    def validate_telegram_setup(self) -> dict:
        """Validate Telegram bot configuration"""
        if not self.is_configured():
            return {
                "valid": False,
                "error": "Missing bot token or chat ID"
            }

        try:
            url = f"https://api.telegram.org/bot{self.bot_token}/getMe"
            response = requests.get(url, timeout=10)
            response.raise_for_status()
            
            bot_info = response.json()
            if bot_info.get("ok"):
                return {
                    "valid": True,
                    "bot_info": {
                        "name": bot_info["result"]["first_name"],
                        "username": bot_info["result"].get("username"),
                        "id": bot_info["result"]["id"]
                    }
                }
            else:
                return {
                    "valid": False,
                    "error": "Invalid bot token"
                }

        except Exception as e:
            return {
                "valid": False,
                "error": str(e)
            }

    async def test_alert(self):
        """Send test message to verify configuration"""
        message = """🧪 <b>Test Alert</b>

This is a test message from your AIML Honeypot to verify Telegram integration is working correctly.

✅ <i>If you receive this message, your Telegram alerts are properly configured!</i>"""

        return self._send_message(message)
